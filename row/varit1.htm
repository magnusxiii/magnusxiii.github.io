<!DOCTYPE html>
<html lang="el">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Βαρυτικά Κύματα 3D</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            background-color: #000;
            color: white;
            font-family: Arial, sans-serif;
        }
        
        canvas {
            display: block;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1;
        }
        
        .controls {
            position: fixed;
            bottom: 20px;
            left: 20px;
            z-index: 2;
            background-color: rgba(0, 0, 0, 0.7);
            padding: 15px;
            border-radius: 10px;
            display: flex;
            flex-direction: column;
            gap: 10px;
            max-width: 300px;
        }
        
        .title {
            position: fixed;
            top: 20px;
            left: 0;
            width: 100%;
            text-align: center;
            z-index: 2;
            font-size: 24px;
            text-shadow: 0 0 10px rgba(0, 100, 255, 0.8);
        }
        
        label {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        input[type="range"] {
            width: 150px;
        }
    </style>
</head>
<body>
    <div class="title">Προσομοίωση Βαρυτικών Κυμάτων από Μαύρες Τρύπες</div>
    
    <canvas id="canvas"></canvas>
    
    <div class="controls">
        <label>
            Μάζα πρώτης μαύρης τρύπας:
            <input type="range" id="mass1" min="5" max="30" value="15">
            <span id="mass1Value">15</span>
        </label>
        
        <label>
            Μάζα δεύτερης μαύρης τρύπας:
            <input type="range" id="mass2" min="5" max="30" value="15">
            <span id="mass2Value">15</span>
        </label>
        
        <label>
            Απόσταση:
            <input type="range" id="distance" min="50" max="200" value="100">
            <span id="distanceValue">100</span>
        </label>
        
        <label>
            Ταχύτητα:
            <input type="range" id="speed" min="1" max="10" value="3">
            <span id="speedValue">3</span>
        </label>
    </div>

    <script>
        // Αρχικοποίηση μεταβλητών
        let canvas, ctx;
        let width, height;
        let time = 0;
        let mass1 = 15;
        let mass2 = 15;
        let distance = 100;
        let speed = 3;
        
        // Αρχικοποίηση
        function init() {
            canvas = document.getElementById('canvas');
            ctx = canvas.getContext('2d');
            
            // Ρύθμιση μεγέθους canvas
            resize();
            window.addEventListener('resize', resize);
            
            // Προσθήκη event listeners για τα controls
            document.getElementById('mass1').addEventListener('input', updateParams);
            document.getElementById('mass2').addEventListener('input', updateParams);
            document.getElementById('distance').addEventListener('input', updateParams);
            document.getElementById('speed').addEventListener('input', updateParams);
            
            // Ενημέρωση των τιμών
            updateParamDisplays();
            
            // Έναρξη animation
            animate();
        }
        
        // Ρύθμιση μεγέθους canvas
        function resize() {
            width = window.innerWidth;
            height = window.innerHeight;
            canvas.width = width;
            canvas.height = height;
        }
        
        // Ενημέρωση παραμέτρων
        function updateParams() {
            mass1 = parseInt(document.getElementById('mass1').value);
            mass2 = parseInt(document.getElementById('mass2').value);
            distance = parseInt(document.getElementById('distance').value);
            speed = parseInt(document.getElementById('speed').value);
            
            updateParamDisplays();
        }
        
        // Ενημέρωση εμφανιζόμενων τιμών
        function updateParamDisplays() {
            document.getElementById('mass1Value').textContent = mass1;
            document.getElementById('mass2Value').textContent = mass2;
            document.getElementById('distanceValue').textContent = distance;
            document.getElementById('speedValue').textContent = speed;
        }
        
        // Animation loop
        function animate() {
            // Καθαρισμός canvas
            ctx.fillStyle = 'black';
            ctx.fillRect(0, 0, width, height);
            
            // Σχεδίαση των βαρυτικών κυμάτων και των μαύρων τρυπών
            drawGravitationalWaves();
            
            // Επόμενο frame
            time += 0.05 * speed;
            requestAnimationFrame(animate);
        }
        
        // Σχεδίαση βαρυτικών κυμάτων
        function drawGravitationalWaves() {
            const centerX = width / 2;
            const centerY = height / 2;
            
            // Υπολογισμός θέσεων μαύρων τρυπών
            const angle = time;
            const totalMass = mass1 + mass2;
            const ratio1 = mass2 / totalMass;
            const ratio2 = mass1 / totalMass;
            
            const bh1X = centerX + Math.cos(angle) * distance * ratio1;
            const bh1Y = centerY + Math.sin(angle) * distance * ratio1;
            const bh2X = centerX - Math.cos(angle) * distance * ratio2;
            const bh2Y = centerY - Math.sin(angle) * distance * ratio2;
            
            // Σχεδίαση του πλέγματος
            drawGrid(bh1X, bh1Y, bh2X, bh2Y);
            
            // Σχεδίαση των σπειροειδών κυμάτων
            drawSpiralWaves(centerX, centerY);
            
            // Σχεδίαση των μαύρων τρυπών
            drawBlackHole(bh1X, bh1Y, mass1);
            drawBlackHole(bh2X, bh2Y, mass2);
        }
        
        // Σχεδίαση πλέγματος
        function drawGrid(bh1X, bh1Y, bh2X, bh2Y) {
            const gridSize = 20;
            const cellWidth = width / gridSize;
            const cellHeight = height / gridSize;
            
            ctx.strokeStyle = 'rgba(50, 50, 150, 0.3)';
            ctx.lineWidth = 1;
            
            for (let x = 0; x <= gridSize; x++) {
                for (let y = 0; y <= gridSize; y++) {
                    const posX = x * cellWidth;
                    const posY = y * cellHeight;
                    
                    // Υπολογισμός παραμόρφωσης
                    const dist1 = Math.sqrt((posX - bh1X) ** 2 + (posY - bh1Y) ** 2);
                    const dist2 = Math.sqrt((posX - bh2X) ** 2 + (posY - bh2Y) ** 2);
                    
                    const effect1 = mass1 * 20 / Math.max(dist1, 10);
                    const effect2 = mass2 * 20 / Math.max(dist2, 10);
                    
                    const waveEffect1 = Math.sin(dist1 * 0.05 - time) * effect1;
                    const waveEffect2 = Math.sin(dist2 * 0.05 - time) * effect2;
                    
                    const totalEffect = waveEffect1 + waveEffect2;
                    
                    // Σχεδίαση σημείου
                    const pointSize = 2 + Math.abs(totalEffect) * 0.2;
                    const intensity = 100 + totalEffect * 5;
                    
                    ctx.fillStyle = `rgb(${intensity * 0.5}, ${intensity * 0.7}, ${intensity * 1.5})`;
                    ctx.beginPath();
                    ctx.arc(posX, posY, pointSize, 0, Math.PI * 2);
                    ctx.fill();
                }
            }
        }
        
        // Σχεδίαση σπειροειδών κυμάτων
        function drawSpiralWaves(centerX, centerY) {
            const maxRadius = Math.sqrt(width * width + height * height) / 2;
            
            for (let i = 0; i < 3; i++) {
                const phaseOffset = i * Math.PI * 2 / 3;
                
                ctx.beginPath();
                ctx.strokeStyle = `rgba(100, 150, 255, 0.2)`;
                ctx.lineWidth = 2;
                
                for (let angle = 0; angle < Math.PI * 10; angle += 0.1) {
                    const wavePhase = angle * 2 + time + phaseOffset;
                    const radius = angle * 15 + Math.sin(wavePhase) * 10;
                    
                    if (radius > maxRadius) break;
                    
                    const x = centerX + Math.cos(angle) * radius;
                    const y = centerY + Math.sin(angle) * radius;
                    
                    if (angle === 0) {
                        ctx.moveTo(x, y);
                    } else {
                        ctx.lineTo(x, y);
                    }
                }
                
                ctx.stroke();
            }
        }
        
        // Σχεδίαση μαύρης τρύπας
        function drawBlackHole(x, y, mass) {
            const radius = mass * 0.8;
            
            // Δίσκος προσαύξησης
            const gradient = ctx.createRadialGradient(x, y, radius, x, y, radius * 3);
            gradient.addColorStop(0, 'rgba(100, 0, 150, 0.8)');
            gradient.addColorStop(0.5, 'rgba(200, 50, 0, 0.4)');
            gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');
            
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.arc(x, y, radius * 3, 0, Math.PI * 2);
            ctx.fill();
            
            // Μαύρη τρύπα
            ctx.fillStyle = 'black';
            ctx.beginPath();
            ctx.arc(x, y, radius, 0, Math.PI * 2);
            ctx.fill();
            
            // Εφέ φακού
            ctx.fillStyle = 'rgba(255, 255, 255, 0.15)';
            ctx.beginPath();
            ctx.arc(x, y, radius * 0.3, 0, Math.PI * 2);
            ctx.fill();
        }
        
        // Εκκίνηση όταν φορτωθεί η σελίδα
        window.addEventListener('load', init);
    </script>
</body>
</html>
