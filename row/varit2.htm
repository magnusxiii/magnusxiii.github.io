<!DOCTYPE html>
<html lang="el">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Βαρυτικά Κύματα 3D</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #000;
            color: #fff;
            overflow-x: hidden;
        }
        
        header {
            padding: 20px;
            text-align: center;
            background-color: rgba(0, 0, 0, 0.7);
            position: fixed;
            width: 100%;
            z-index: 100;
        }
        
        h1 {
            font-size: 2rem;
            margin-bottom: 10px;
        }
        
        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
            padding: 100px 20px 50px;
        }
        
        #simulation {
            width: 100%;
            height: 70vh;
            margin: 20px 0;
            position: relative;
        }
        
        canvas {
            display: block;
            width: 100%;
            height: 100%;
            background-color: #000;
        }
        
        .controls {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 15px;
            margin: 20px 0;
            width: 100%;
            max-width: 800px;
        }
        
        .control-group {
            display: flex;
            flex-direction: column;
            min-width: 200px;
        }
        
        label {
            margin-bottom: 5px;
        }
        
        input[type="range"] {
            width: 100%;
        }
        
        .info {
            max-width: 800px;
            margin: 20px auto;
            text-align: justify;
            line-height: 1.6;
        }
        
        footer {
            text-align: center;
            padding: 20px;
            background-color: rgba(0, 0, 0, 0.7);
            margin-top: 20px;
        }
        
        @media (max-width: 768px) {
            h1 {
                font-size: 1.5rem;
            }
            
            .container {
                padding: 80px 10px 30px;
            }
            
            #simulation {
                height: 50vh;
            }
            
            .control-group {
                min-width: 150px;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>Προσομοίωση Βαρυτικών Κυμάτων</h1>
        <p>Αλληλεπίδραση δύο μαύρων τρυπών σε 3D</p>
    </header>
    
    <div class="container">
        <div id="simulation">
            <canvas id="waveCanvas"></canvas>
        </div>
        
        <div class="controls">
            <div class="control-group">
                <label for="mass1">Μάζα πρώτης μαύρης τρύπας:</label>
                <input type="range" id="mass1" min="1" max="30" value="10">
                <span id="mass1Value">10</span>
            </div>
            
            <div class="control-group">
                <label for="mass2">Μάζα δεύτερης μαύρης τρύπας:</label>
                <input type="range" id="mass2" min="1" max="30" value="10">
                <span id="mass2Value">10</span>
            </div>
            
            <div class="control-group">
                <label for="distance">Απόσταση μεταξύ τους:</label>
                <input type="range" id="distance" min="50" max="200" value="100">
                <span id="distanceValue">100</span>
            </div>
            
            <div class="control-group">
                <label for="speed">Ταχύτητα περιστροφής:</label>
                <input type="range" id="speed" min="1" max="10" value="5">
                <span id="speedValue">5</span>
            </div>
        </div>
        
        <div class="info">
            <h2>Σχετικά με τα Βαρυτικά Κύματα</h2>
            <p>Τα βαρυτικά κύματα είναι διαταραχές στον χωροχρόνο που διαδίδονται ως κύματα με την ταχύτητα του φωτός. Προβλέφθηκαν από τον Αϊνστάιν στη Γενική Θεωρία της Σχετικότητας και ανιχνεύθηκαν για πρώτη φορά το 2015.</p>
            <p>Στην προσομοίωση αυτή, μπορείτε να παρατηρήσετε πώς δύο μαύρες τρύπες που περιστρέφονται η μία γύρω από την άλλη δημιουργούν κυματισμούς στον χωροχρόνο. Καθώς πλησιάζουν η μία την άλλη, η συχνότητα και το πλάτος των κυμάτων αυξάνονται μέχρι τη στιγμή της συγχώνευσης.</p>
        </div>
    </div>
    
    <footer>
        <p>© 2025 - Προσομοίωση Βαρυτικών Κυμάτων</p>
    </footer>

    <script>
        // Αρχικοποίηση των μεταβλητών
        let canvas, ctx;
        let animationId;
        let time = 0;
        let mass1 = 10;
        let mass2 = 10;
        let distance = 100;
        let speed = 5;
        
        // Ρύθμιση του canvas και έναρξη της προσομοίωσης
        function init() {
            canvas = document.getElementById('waveCanvas');
            ctx = canvas.getContext('2d');
            
            // Ρύθμιση του μεγέθους του canvas
            resizeCanvas();
            window.addEventListener('resize', resizeCanvas);
            
            // Προσθήκη event listeners για τα controls
            document.getElementById('mass1').addEventListener('input', updateParams);
            document.getElementById('mass2').addEventListener('input', updateParams);
            document.getElementById('distance').addEventListener('input', updateParams);
            document.getElementById('speed').addEventListener('input', updateParams);
            
            // Αρχικοποίηση των τιμών στα spans
            updateParamDisplays();
            
            // Έναρξη της προσομοίωσης
            animate();
        }
        
        // Προσαρμογή του μεγέθους του canvas
        function resizeCanvas() {
            canvas.width = canvas.clientWidth;
            canvas.height = canvas.clientHeight;
        }
        
        // Ενημέρωση των παραμέτρων από τα sliders
        function updateParams() {
            mass1 = parseInt(document.getElementById('mass1').value);
            mass2 = parseInt(document.getElementById('mass2').value);
            distance = parseInt(document.getElementById('distance').value);
            speed = parseInt(document.getElementById('speed').value);
            
            updateParamDisplays();
        }
        
        // Ενημέρωση των εμφανιζόμενων τιμών
        function updateParamDisplays() {
            document.getElementById('mass1Value').textContent = mass1;
            document.getElementById('mass2Value').textContent = mass2;
            document.getElementById('distanceValue').textContent = distance;
            document.getElementById('speedValue').textContent = speed;
        }
        
        // Συνάρτηση για τη δημιουργία των βαρυτικών κυμάτων
        function drawGravitationalWaves() {
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            
            // Καθαρισμός του canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Υπολογισμός των θέσεων των μαύρων τρυπών
            const angle = time * speed * 0.01;
            const blackHole1X = centerX + Math.cos(angle) * distance / 2;
            const blackHole1Y = centerY + Math.sin(angle) * distance / 2;
            const blackHole2X = centerX - Math.cos(angle) * distance / 2;
            const blackHole2Y = centerY - Math.sin(angle) * distance / 2;
            
            // Σχεδίαση των βαρυτικών κυμάτων
            drawWaveMesh(centerX, centerY, blackHole1X, blackHole1Y, blackHole2X, blackHole2Y);
            
            // Σχεδίαση των μαύρων τρυπών
            drawBlackHole(blackHole1X, blackHole1Y, mass1);
            drawBlackHole(blackHole2X, blackHole2Y, mass2);
            
            // Αύξηση του χρόνου
            time++;
        }
        
        // Σχεδίαση του πλέγματος κυμάτων
        function drawWaveMesh(centerX, centerY, bh1X, bh1Y, bh2X, bh2Y) {
            const gridSize = 20;
            const cellSize = Math.max(canvas.width, canvas.height) / gridSize;
            
            // Δημιουργία του πλέγματος
            for (let i = 0; i <= gridSize; i++) {
                for (let j = 0; j <= gridSize; j++) {
                    const x = j * cellSize;
                    const y = i * cellSize;
                    
                    // Υπολογισμός της επίδρασης των μαύρων τρυπών στο σημείο
                    const dist1 = Math.sqrt(Math.pow(x - bh1X, 2) + Math.pow(y - bh1Y, 2));
                    const dist2 = Math.sqrt(Math.pow(x - bh2X, 2) + Math.pow(y - bh2Y, 2));
                    
                    // Δημιουργία του εφέ κύματος
                    const waveEffect1 = Math.sin(dist1 * 0.05 - time * 0.1) * mass1 / dist1 * 15;
                    const waveEffect2 = Math.sin(dist2 * 0.05 - time * 0.1) * mass2 / dist2 * 15;
                    const totalEffect = waveEffect1 + waveEffect2;
                    
                    // Σχεδίαση του σημείου με χρώμα ανάλογα με το εφέ
                    const intensity = Math.min(255, Math.max(0, 128 + totalEffect * 5));
                    ctx.fillStyle = `rgb(${intensity}, ${intensity / 2}, ${intensity * 2})`;
                    
                    // Προσαρμογή του μεγέθους του σημείου
                    const pointSize = 2 + Math.abs(totalEffect) * 0.2;
                    ctx.beginPath();
                    ctx.arc(x, y, pointSize, 0, Math.PI * 2);
                    ctx.fill();
                }
            }
        }
        
        // Σχεδίαση μαύρης τρύπας
        function drawBlackHole(x, y, mass) {
            // Σχεδίαση του ορίζοντα γεγονότων
            const radius = mass * 1.5;
            
            // Δημιουργία ακτινωτής διαβάθμισης για την οπτική απεικόνιση
            const gradient = ctx.createRadialGradient(x, y, 0, x, y, radius * 3);
            gradient.addColorStop(0, 'rgba(0, 0, 0, 1)');
            gradient.addColorStop(0.7, 'rgba(50, 0, 80, 0.8)');
            gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');
            
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.arc(x, y, radius * 3, 0, Math.PI * 2);
            ctx.fill();
            
            // Σχεδίαση του κέντρου της μαύρης τρύπας
            ctx.fillStyle = 'black';
            ctx.beginPath();
            ctx.arc(x, y, radius, 0, Math.PI * 2);
            ctx.fill();
        }
        
        // Συνάρτηση animation
        function animate() {
            drawGravitationalWaves();
            animationId = requestAnimationFrame(animate);
        }
        
        // Εκκίνηση της εφαρμογής όταν φορτωθεί η σελίδα
        window.addEventListener('load', init);
    </script>
</body>
</html>
